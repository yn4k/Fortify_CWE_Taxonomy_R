<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.config.java.http_verb_tampering -->						
							<h1>
							   HTTP Verb Tampering
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Security constraints that specify HTTP verbs often allow more access than intended.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  An application's authentication and authorization mechanisms can be bypassed with HTTP verb tampering when:<br>1) It uses a security control that lists HTTP verbs.<br>2) The security control fails to block verbs that are not listed.<br>3) The application updates its state based on GET requests or other arbitrary HTTP verbs.<br><br><br><br>Most Java EE implementations allow HTTP methods that are not explicitly listed in the configuration. For example the following security constraint is applied to the HTTP GET method but not to other HTTP verbs:<br><br></p>
<pre><br>    &lt;security-constraint&gt;<br>        &lt;display-name&gt;Admin Constraint&lt;/display-name&gt;<br>        &lt;web-resource-collection&gt;<br>            &lt;web-resource-name&gt;Admin Area&lt;/web-resource-name&gt;<br>            &lt;url-pattern&gt;/pages/index.jsp&lt;/url-pattern&gt;<br>            &lt;url-pattern&gt;/admin/*.do&lt;/url-pattern&gt;<br>            &lt;http-method&gt;GET&lt;/http-method&gt;<br>            &lt;http-method&gt;POST&lt;/http-method&gt;<br>        &lt;/web-resource-collection&gt;<br>        &lt;auth-constraint&gt;<br>            &lt;description&gt;only admin&lt;/description&gt;<br>            &lt;role-name&gt;admin&lt;/role-name&gt;<br>        &lt;/auth-constraint&gt;<br>    &lt;/security-constraint&gt;<br></pre>
<br><br>Since verbs like HEAD are not explicitly defined in an <code>&lt;http-method&gt;</code> tag in this configuration, it might be possible to exercise administrative functionality by substituting GET or POST requests with HEAD requests. For HEAD requests to exercise administrative functionality, condition 3 must hold - the application must carry out commands based on verbs other than POST. Some web/application servers will accept arbitrary non-standard HTTP verbs and respond as if they were given a GET request. If that is the case, an attacker would be able to view administrative pages by using an arbitrary verb in a request.<br><br>For example, a typically client GET requests looks like:<br><pre><br>GET /admin/viewUsers.do HTTP/1.1<br>Host: www.example.com<br></pre>
<br><br>In an HTTP Verb Tampering attack, an attacker would substitute GET with something like FOO<br><pre><br>FOO /admin/viewUsers.do HTTP/1.1<br>Host: www.example.com<br></pre>
<br><br>At its core, this vulnerability is the result of an attempt to create a blacklist--a policy that specifies what users are not allowed to do. Blacklists rarely achieve their intended effect.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] Arshan Dabirsiaghi - Aspect Security <em>Bypassing Web Authentication and Authorization with HTTP Verb Tampering</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 288</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>CM</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2010 <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2013 <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authentication</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Application Misconfiguration (WASC-15)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.config.java.http_verb_tampering
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
