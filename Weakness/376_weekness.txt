<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.password_management_empty_password -->						
							<h1>
							   Password Management: Empty Password
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Empty passwords may compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths.<br><br><br><br><b>Example 1:</b> The code below attempts to connect to a database with an empty password.<br></p>
<pre><br>    ...<br>    DriverManager.getConnection(url, "scott", "");<br>    ...<br></pre>
<br><br>If the code in Example 1 succeeds, it indicates that the database user account "scott" is configured with an empty password, which can be easily guessed by an attacker. Even worse, once the program has shipped, updating the account to use a non-empty password will require a code change.<br><br><b>Example 2:</b> The code below initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value.<br><br><pre><br>    ...<br>    String storedPassword = "";<br>    String temp;<br><br>    if ((temp = readPassword()) != null) {<br>        storedPassword = temp;<br>    }<br><br>    if(storedPassword.equals(userPassword))<br>        // Access protected resources<br>        ...<br>    }<br>    ...<br></pre>
<br><br>If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for <code>userPassword</code>.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 3:</b> The code below initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String username = "";<br>    String password = "";<br><br>    if (handler.useHttpAuthUsernamePassword()) {<br>      String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>      username = credentials[0];<br>      password = credentials[1];<br>    }<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre>
<br><br>Similar to Example 2, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying an empty password.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>SQLCipher.</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 259</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>IA</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authentication</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authentication (WASC-01)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.password_management_empty_password
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
