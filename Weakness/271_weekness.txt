<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.insecure_sanitizer_policy -->						
							<h1>
							   Insecure Sanitizer Policy
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Usage of user-controlled or untrusted data to define HTML sanitizer policy could allow an attacker to circumvent the sanitization requirements and launch cross-site scripting (XSS) attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The umbrella term "input handling" describes functions such as validation, sanitization, filtering, and encoding/decoding of input data. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incorrect or absent input handling. Sanitization of input, which entails transforming input to an acceptable form, is typically implemented in addition to input validation. HTML sanitization refers to cleansing and scrubbing user input to allow only tags, attributes and elements that are deemed safe.<br>	Implementing a thorough HTML sanitization policy is difficult; the key to successful implementation is understanding the context in which the data will be used. Each context has its own vulnerabilities, and one size does not fit all. While it is wise to use an HTML sanitizer (for example the OWASP HTML sanitizer) to protect against XSS vulnerabilities in web applications, improper implementation can lead to a false sense of security.<br><br><br><b>Example 1: </b>The following Java code uses user-controlled input variable <code>elements</code> in building an HTML sanitizer policy:<br><br></p>
<pre><br>...<br>String elements = prop.getProperty("AllowedElements");<br>...<br>public static final PolicyFactory POLICY_DEFINITION = new HtmlPolicyBuilder()<br>															.allowElements(elements)<br>															.toFactory();<br><br>....<br></pre>
<br><br>A malicious user can cause the HTML sanitizer policy to accept dangerous elements like &lt;script&gt; by supplying them to <code>elements</code>.<br><br><h2>REFERENCES</h2>
																								   <p>[1] OWASP <em>Cross-Site Scripting (XSS) Prevention Cheat Sheet</em> <br></p>
																									   <p>[2]  <em>Understanding Malicious Content Mitigation for Web Developers</em> CERT<br></p>
																									   <p>[3]  <em>HTML 4.01 Specification</em> W3<br></p>
																									   <p>[4]  <em>Input Validation and Representation</em> Fortify, An HP Company<br></p>
																									   <p>[5]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[6] Standards Mapping - Common Weakness Enumeration <em>CWE ID 79, CWE ID 80</em> <br></p>
																									   <p>[7] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[8] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-15 Information Output Filtering (P0)</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2004 <em>A4 Cross Site Scripting</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Top 10 2007 <em>A1 Cross Site Scripting (XSS)</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Top 10 2010 <em>A2 Cross-Site Scripting (XSS)</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Top 10 2013 <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.4</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[19] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[20] Standards Mapping - SANS Top 25 2010 <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[21] Standards Mapping - SANS Top 25 2011 <em>Insecure Interaction - CWE ID 079</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[25] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[26] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[27] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3580 CAT I</em> <br></p>
																									   <p>[28] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Cross-Site Scripting</em> <br></p>
																									   <p>[29] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Cross-Site Scripting (WASC-08)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.insecure_sanitizer_policy
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
