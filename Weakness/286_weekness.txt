<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.path_manipulation -->						
							<h1>
							   Path Manipulation
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to control paths used in filesystem operations could enable an attacker to access or modify otherwise protected system resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Path manipulation errors occur when the following two conditions are met:<br><br>1. An attacker can specify a path used in an operation on the filesystem.<br><br>2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted.<br><br>For example, the program may give the attacker the ability to overwrite the specified file or run with a configuration controlled by the attacker.<br><br><b>Example 1:</b> The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as "<code>../../tomcat/conf/server.xml</code>", which causes the application to delete one of its own configuration files.<br><br></p>
<pre><br>String rName = request.getParameter("reportName");<br>File rFile = new File("/usr/local/apfr/reports/" + rName);<br>...<br>rFile.delete();<br></pre>
<br><br><b>Example 2:</b> The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension <code>.txt</code>.<br><br><pre><br>fis = new FileInputStream(cfg.getProperty("sub")+".txt");<br>amt = fis.read(arr);<br>out.println(arr);<br></pre>
<br><br>Some think that in the mobile world, classic vulnerabilities, such as path manipulation, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 3:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        String rName = this.getIntent().getExtras().getString("reportName");<br>	File rFile = getBaseContext().getFileStreamPath(rName);<br>...<br>	rFile.delete();<br>...<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[2]  <em>FIO00-J. Do not operate on files in shared directories</em> CERT<br></p>
																									   <p>[3]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[4] Standards Mapping - Common Weakness Enumeration <em>CWE ID 22, CWE ID 73</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2009 <em>Risky Resource Management - CWE ID 426</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2010 <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[19] Standards Mapping - SANS Top 25 2011 <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[25] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[26] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Path Traversal</em> <br></p>
																									   <p>[27] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Path Traversal (WASC-33)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.path_manipulation
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
