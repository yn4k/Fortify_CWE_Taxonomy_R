<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.password_management_hardcoded_password -->						
							<h1>
							   Password Management: Hardcoded Password
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Hardcoded passwords may compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to hardcode a password. Not only does hardcoding a password allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. Once the code is in production, the password cannot be changed without patching the software. If the account protected by the password is compromised, the owners of the system will be forced to choose between security and availability.<br><br><br><b>Example 1:</b> The following code uses a hardcoded password to connect to a database:<br><br></p>
<pre><br>...<br>DriverManager.getConnection(url, "scott", "tiger");<br>...<br></pre>
<br><br>This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user "scott" with a password of "tiger" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for the application they can use the <code>javap -c</code> command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:<br><br><pre><br>javap -c ConnMngr.class<br><br>22: ldc   #36; //String jdbc:mysql://ixne.com/rxsql<br>24: ldc   #38; //String scott<br>26: ldc   #17; //String tiger<br></pre>
<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below uses hardcoded username and password to setup authentication for viewing protected pages with Android's WebView.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    handler.proceed("guest", "allow");<br>  }<br>});<br>...<br></pre>
<br><br>Similar to Example 1, this code will run successfully, but anyone who has access to it will have access to the password.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>SQLCipher.</em> <br></p>
																									   <p>[2]  <em>MSC03-J. Never hard code sensitive information</em> CERT<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 259, CWE ID 798</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>IA</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2009 <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 <em>Porous Defenses - CWE ID 798</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 <em>Porous Defenses - CWE ID 798</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3210.1 CAT II, APP3340 CAT I, APP3350 CAT I</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authentication</em> <br></p>
																									   <p>[26] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authentication (WASC-01)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.password_management_hardcoded_password
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
