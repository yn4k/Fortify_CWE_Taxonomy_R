<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.config.java.websphere_service_requester_misconfiguration_unsigned_outbound_timestamp -->						
							<h1>
							   WebSphere Service Requester Misconfiguration: Unsigned Outbound Timestamp
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  An unsigned timestamp can leave a SOAP message open to tampering and replay attacks.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Security timestamp indicates a message's freshness. If an attacker intercepts a message retransmits it at a later time, the receiver can reject the replay attack because the timestamp will indicate that the message is stale. Optionally, timestamps can include an expiration attribute which places a hard limit on how long security semantics are valid.<br><br>To prevent attackers from tampering with timestamps, timestamps should be signed. Without a signed timestamp, an attacker can intercept a SOAP message, modify the timestamp, and send the message on without the receiver's knowledge. Under these circumstances, an attacker can potentially trick a recipient into accepting a malicious message.<br><br>The following client configuration tells WebSphere to send unsigned timestamps:<br></p>
<pre><br>&lt;com.ibm.etools.webservice.wscext:WsClientExtension xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:com.ibm.etools.webservice.wscext="http://www.ibm.com/websphere/appserver/schemas/5.0.2/wscext.xmi" xmi:id="WsClientExtension_1152150778436"&gt;<br>        ...<br>        &lt;securityRequestGeneratorServiceConfig xmi:id="SecurityRequestGeneratorServiceConfig_1212078169562"&gt;<br>          &lt;addTimestamp xmi:id="AddTimestamp_1212093882250"/&gt;<br>          ...<br>&lt;/com.ibm.etools.webservice.wscext:WsClientExtension&gt;<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Web Services Handbook for WebSphere Application Server 6.1</em> IBM Redbooks<br></p>
																									   <p>[2]  <em>Web Services Security: SOAP Message Security 1.1</em> OASIS<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 345</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>CM</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-8 Transmission Confidentiality and Integrity (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M3 Insufficient Transport Layer Protection</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A10 Insecure Configuration Management</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3260.1 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3860 CAT II, APP3260 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3860 CAT II, APP3260 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3860 CAT II, APP3260 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3860 CAT II, APP3260 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3860 CAT II, APP3260 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authentication</em> <br></p>
																									   <p>[20] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Transport Layer Protection (WASC-04)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.config.java.websphere_service_requester_misconfiguration_unsigned_outbound_timestamp
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
