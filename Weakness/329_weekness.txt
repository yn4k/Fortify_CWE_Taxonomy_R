<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.access_control_amazon_web_services -->						
							<h1>
							   Access Control: Amazon Web Services
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Accessing a SimpleDB database with a user-controlled item name and without proper access control can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Database access control errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br><br>2.  The data is used to specify the item name in a SimpleDB access call.<br><br><br><b>Example 1:</b> The following code operates on a database of invoices named after the date of their transaction. The program first authenticates customers and subsequently lets them select from a list previous invoices.<br><br></p>
<pre><br>...<br>String selectedInvoice = request.getParameter("invoiceDate");<br>...<br>AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);<br>GetAttributesResult sdbResult = sdbc.getAttributes(new GetAttributesRequest("invoices", selectedInvoice));<br>...<br></pre>
<br><br>Although the code in Example 1 generates a list of invoices that belong to the current user, an attacker can bypass this behavior to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 566</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>AC</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A2 Broken Access Control</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.2</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.5.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authorization</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authorization (WASC-02)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.access_control_amazon_web_services
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
