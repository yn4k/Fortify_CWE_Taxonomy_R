<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.config.java.j2ee_misconfiguration_incomplete_error_handling.abs.throwable -->						
							<h1>
							   J2EE Misconfiguration: Incomplete Error Handling - (throwable)
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  A web application must define a default error page for <code>java.lang.Throwable</code> to handle any uncaught exceptions in order to prevent attackers from mining information from the application container's built-in error response.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When an attacker explores a web site looking for vulnerabilities, the amount of information that the site provides is crucial to the eventual success or failure of any attempted attacks. If the application shows the attacker a stack trace, it relinquishes information that makes the attacker's job significantly easier. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br>The application configuration should specify a default error page in order to guarantee that the application will never leak error messages to an attacker. Handling standard HTTP error codes is useful and user-friendly in addition to being a good security practice, and a good configuration will also define a last-chance error handler that catches any exception that could possibly be thrown by the application.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] G. Hoglund, G. McGraw <em>Exploiting Software</em> Addison-Wesley<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 7</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2004 <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2010 <em>A6 Security Misconfiguration</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2013 <em>A5 Security Misconfiguration</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Information Leakage</em> <br></p>
																									   <p>[21] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Information Leakage (WASC-13)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.config.java.j2ee_misconfiguration_incomplete_error_handling.abs.throwable
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
