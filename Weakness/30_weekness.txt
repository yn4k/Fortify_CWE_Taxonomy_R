<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.controlflow.java.missing_check_against_null -->						
							<h1>
							   Missing Check against Null
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The program can dereference a null pointer because it does not check the return value of a function that might return null.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.<br><br>Two dubious assumptions that are easy to spot in code are "this function call can never fail" and "it doesn't matter if this function call fails". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions.<br><br><br><br><b>Example 1:</b>  The following code does not check to see if the string returned by <code>getParameter()</code> is <code>null</code> before calling the member function <code>compareTo()</code>, potentially causing a null dereference.<br><br></p>
<pre><br>String itemName = request.getParameter(ITEM_NAME);<br>	if (itemName.compareTo(IMPORTANT_ITEM)) {<br>		...<br>	}<br>	...<br></pre>
<br><br><b>Example 2:</b>. The following code shows a system property that is set to <code>null</code> and later dereferenced by a programmer who mistakenly assumes it will always be defined.<br><br><pre><br>System.clearProperty("os.name");<br>...<br>String os = System.getProperty("os.name");<br>if (os.equalsIgnoreCase("Windows 95") )<br>	System.out.println("Not supported");<br></pre>
<br><br>The traditional defense of this coding error is:<br><br>"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."<br><br>But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration <em>CWE ID 253, CWE ID 690</em> <br></p>
																									   <p>[2] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-5 Denial of Service Protection (P1)</em> <br></p>
																									   <p>[3] Standards Mapping - OWASP Top 10 2004 <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[4] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.9</em> <br></p>
																									   <p>[5] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II, APP6080 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Denial of Service</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Denial of Service (WASC-10)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.controlflow.java.missing_check_against_null
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
