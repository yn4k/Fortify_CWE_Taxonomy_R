<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.poor_error_handling_throw_inside_finally -->						
							<h1>
							   Poor Error Handling: Throw Inside Finally
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Using a <code>throw</code> statement inside a <code>finally</code> block breaks the logical progression through the <code>try-catch-finally</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In Java, <code>finally</code> blocks are always executed after their corresponding <code>try-catch</code> blocks and are often used to free allocated resources, such as file handles or database cursors. Throwing an exception in a <code>finally</code> block can bypass critical cleanup code since normal program execution will be disrupted.<br><br><b>Example 1:</b> In the following code, the call to <code>stmt.close()</code> is bypassed when the <code>FileNotFoundException</code> is thrown.<br></p>
<pre><br>public void processTransaction(Connection conn) throws FileNotFoundException<br>{<br>FileInputStream fis = null;<br>Statement stmt = null;<br>try<br>{<br>    stmt = conn.createStatement();<br>    fis = new FileInputStream("badFile.txt");<br>    ...<br>}<br>catch (FileNotFoundException fe)<br>{<br>    log("File not found.");<br>}<br>catch (SQLException se)<br>{<br>    //handle error<br>}<br>finally<br>{<br>    if (fis == null)<br>    {<br>        throw new FileNotFoundException();<br>    }<br><br>    if (stmt != null)<br>    {<br>        try<br>        {<br>            stmt.close();<br>        }<br>        catch (SQLException e)<br>        {<br>            log(e);<br>        }<br>    }<br>}<br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] Sun Microsystems, Inc. <em>Java Sun Tutorial</em> <br></p>
																									   <p>[2]  <em>ERR05-J. Do not let checked exceptions escape from a finally block</em> CERT<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 398</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>AU</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.poor_error_handling_throw_inside_finally
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
