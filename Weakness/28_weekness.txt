<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.mass_assignment_insecure_binder_configuration -->						
							<h1>
							   Mass Assignment: Insecure Binder Configuration
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The framework binder used for binding the HTTP request parameters to the model class has not been explicitly configured to allow, or disallow certain attributes.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  To ease development and increase productivity, most modern frameworks allow an object to be automatically instantiated and populated with the HTTP request parameters whose names match an attribute of the class to be bound. Automatic instantiation and population of objects speeds up development, but can lead to serious problems if implemented without caution. Any attribute in the bound classes, or nested classes, will be automatically bound to the HTTP request parameters. Therefore, malicious users will be able to assign a value to any attribute in bound or nested classes, even if they are not exposed to the client through web forms or API contracts.<br><br><b>Example 1: </b>Using Spring MVC with no additional configuration, the following controller method will bind the HTTP request parameters to any attribute in the <code>User</code> or <code>Details</code> classes:<br><br></p>
<pre><br>@RequestMapping(method = RequestMethod.POST)<br>public String registerUser(@ModelAttribute("user") User user, BindingResult result, SessionStatus status) {<br>  if (db.save(user).hasErrors()) {<br>    return "CustomerForm";<br>  } else {<br>    status.setComplete();<br>    return "CustomerSuccess";<br>  }<br>}<br></pre>
<br><br>Where <code>User</code> class is defined as:<br><br><pre><br>public class User {<br>  private String name;<br>  private String lastname;<br>  private int age;<br>  private Details details;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre>
<br><br>and <code>Details</code> class is defined as:<br><br><pre><br>public class Details {<br>  private boolean is_admin;<br>  private int id;<br>  private Date login_date;<br><br>  // Public Getters and Setters<br>  ...<br>}<br></pre>
<br><br><h2>REFERENCES</h2>
																								   <p>[1] OWASP <em>Mass assignment</em> <br></p>
																									   <p>[2] Spring <em>Spring MVC Known Vulnerabilities and Issues</em> <br></p>
																									   <p>[3]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[4] Standards Mapping - Common Weakness Enumeration <em>CWE ID 915</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Abuse of Functionality (WASC-42)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.mass_assignment_insecure_binder_configuration
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
