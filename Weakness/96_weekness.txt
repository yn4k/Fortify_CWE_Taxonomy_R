<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.controlflow.java.unreleased_resource_files -->						
							<h1>
							   Unreleased Resource: Files
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The program can potentially fail to release a file handle.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  The program can potentially fail to release a file handle.<br><br>Resource leaks have at least two common causes:<br><br>- Error conditions and other exceptional circumstances.<br><br>- Confusion over which part of the program is responsible for releasing the resource.<br><br>Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool.<br><br><b>Example 1:</b> The following method never closes the file handle it opens. The <code>finalize()</code> method for <code>ZipFile</code> eventually calls <code>close()</code>, but there is no guarantee as to how long it will take before the <code>finalize()</code> method will be invoked. In a busy environment, this can result in the JVM using up all of its file handles.<br><br></p>
<pre><br>public void printZipContents(String fName)<br>    throws ZipException, IOException, SecurityException, IllegalStateException, NoSuchElementException<br>{<br>  ZipFile zf = new ZipFile(fName);<br>  Enumeration&lt;ZipEntry&gt; e = zf.entries();<br><br>  while (e.hasMoreElements()) {<br>    printFileInfo(e.nextElement());<br>  }<br>}<br></pre>
<br><br><b>Example 2:</b> Under normal conditions, the following fix properly closes the file handle after printing out all the zip file entries. But if an exception occurs while iterating through the entries, the zip file handle will not be closed. If this happens often enough, the JVM can still run out of available file handles.<br><br><pre><br>public void printZipContents(String fName)<br>    throws ZipException, IOException, SecurityException, IllegalStateException, NoSuchElementException<br>{<br>  ZipFile zf = new ZipFile(fName);<br>  Enumeration&lt;ZipEntry&gt; e = zf.entries();<br><br>  while (e.hasMoreElements()) {<br>    printFileInfo(e.nextElement());<br>  }<br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>FIO04-J. Release resources when they are no longer needed</em> CERT<br></p>
																									   <p>[2]  <em>DOS-2: Release resources in all cases</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 404</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-5 Denial of Service Protection (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2004 <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.9</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - SANS Top 25 2009 <em>Risky Resource Management - CWE ID 404</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP6080 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP6080 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP6080 CAT II</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP6080 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP6080 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP6080 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Denial of Service</em> <br></p>
																									   <p>[17] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Denial of Service (WASC-10)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.controlflow.java.unreleased_resource_files
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
