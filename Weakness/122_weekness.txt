<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.system_information_leak_incomplete_servlet_error_handling -->						
							<h1>
							   System Information Leak: Incomplete Servlet Error Handling
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  If a Servlet fails to catch all exceptions, it might reveal debugging information that will help an adversary form a plan of attack.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.<br><br><b>Example 1:</b> In the following method a DNS lookup failure will cause the Servlet to throw an exception.<br><br></p>
<pre><br>protected void doPost (HttpServletRequest req,<br>                    HttpServletResponse res)<br>              throws IOException {<br>    String ip = req.getRemoteAddr();<br>    InetAddress addr = InetAddress.getByName(ip);<br>    ...<br>    out.println("hello " + addr.getHostName());<br>}<br></pre>
<br><br><b>Example 2:</b> The following method will throw a <code>NullPointerException</code> if the parameter "name" is not part of the request.<br><br><pre><br>protected void doPost (HttpServletRequest req,<br>                    HttpServletResponse res)<br>              throws IOException {<br>    String name = getParameter("name");<br>    ...<br>    out.println("hello " + name.trim());<br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] Ernst Haselsteiner and Klemens Breitfuss <em>Security in Near Field Communication (NFC): Strengths and Weaknesses</em> <br></p>
																									   <p>[2]  <em>ERR01-J. Do not allow exceptions to expose sensitive information</em> CERT<br></p>
																									   <p>[3]  <em>CONFIDENTIAL-1: Purge sensitive information from exceptions</em> Oracle<br></p>
																									   <p>[4] Standards Mapping - Common Weakness Enumeration <em>CWE ID 209, CWE ID 431</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 209</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 <em>Insecure Interaction - CWE ID 209</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Information Leakage</em> <br></p>
																									   <p>[20] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Information Leakage (WASC-13)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.system_information_leak_incomplete_servlet_error_handling
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
