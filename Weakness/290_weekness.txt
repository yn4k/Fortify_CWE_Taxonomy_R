<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.query_string_injection_amazon_web_services -->						
							<h1>
							   Query String Injection: Amazon Web Services
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							   Constructing a SimpleDB select statement that contains user input can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Query string injection vulnerabilities occur when:<br>1. Data enters a program from an untrusted source.<br><br><br><br>2. The data is used to dynamically construct a SimpleDB query string.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes a SimpleDB <code>select()</code> query that searches for invoices that match a user-specified product category. The user can also specify the column by which the results are sorted. Assume that the application has already properly authenticated and set the value of <code>customerID</code> prior to this code segment.<br><br></p>
<pre><br>...<br>String customerID = getAuthenticatedCustomerID(customerName, customerCredentials);<br>...<br>AmazonSimpleDBClient sdbc = new AmazonSimpleDBClient(appAWSCredentials);<br>String query = "select * from invoices where productCategory = '"<br>            + productCategory + "' and customerID = '"<br>            + customerID + "' order by '"<br>            + sortColumn + "' asc";<br>SelectResult sdbResult = sdbc.select(new SelectRequest(query));<br>...<br></pre>
<br><br>The query that this code intends to execute looks like:<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines'<br>and customerID = '12345678'<br>order by 'price' asc<br></pre>
<br><br>However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>productCategory</code> and <code>price</code> do not contain single-quote characters. If, however, an attacker provides the string "<code>Fax Machines' or productCategory = \"</code>" for <code>productCategory</code>, and the string "<code>\" order by 'price</code>" for <code>sortColumn</code>, then the query becomes the following:<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines' or productCategory = "'<br>and customerID = '12345678'<br>order by '" order by 'price' asc<br></pre>
<br><br>or, in a more human-readable form,<br><br><pre><br>select * from invoices<br>where productCategory = 'Fax Machines'<br>or productCategory = "' and customerID = '12345678' order by '"<br>order by 'price' asc<br></pre>
<br><br>These inputs allow an attacker to bypass the required authentication for <code>customerID</code>, and allows the attacker to view invoice records matching <code>'Fax Machines'</code> for all customers.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Secure Use of Cloud Storage</em> <br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 89</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M1 Weak Server Side Controls</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2010 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2011 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium 24 + 2 <em>SQL Injection</em> <br></p>
																									   <p>[26] Standards Mapping - Web Application Security Consortium Version 2.00 <em>SQL Injection (WASC-19)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.query_string_injection_amazon_web_services
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
