<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.weak_cryptographic_hash_hardcoded_salt -->						
							<h1>
							   Weak Cryptographic Hash: Hardcoded Salt
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  A hardcoded salt may compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to hardcode a salt. Not only does a hardcoded salt allow all of the project's developers to view the salt, it also makes fixing the problem extremely difficult. Once the code is in production, the salt cannot be easily changed. If attackers know the value of the salt, they can compute "rainbow tables" for the application and more easily determine the hashed values.<br><br><br><b>Example 1:</b> The following code uses a hardcoded salt:<br></p>
<pre><br>    ...<br>    Encryptor instance = ESAPI.encryptor();<br>    String hash1 = instance.hash(input, "2!@$(5#@532@%#$253l5#@$");<br>    ...<br></pre>
<br><br>This code will run successfully, but anyone who has access to it will have access to the salt. Once the program has shipped, there is no going back from the salt "2!@$(5#@532@%#$253l5#@$". A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for the application they can use the <code>javap -c</code> command to access the disassembled code, which will contain the values of the used salt.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>MSC03-J. Never hard code sensitive information</em> CERT<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 760</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>MP</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 <em>Porous Defenses - CWE ID 759</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3150.1 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.weak_cryptographic_hash_hardcoded_salt
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
