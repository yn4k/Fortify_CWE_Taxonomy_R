<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.configuration.java.dynamic_code_evaluation_unsafe_deserialization -->						
							<h1>
							   Dynamic Code Evaluation: Unsafe Deserialization
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Deserializing user-controlled object streams at runtime can allow attackers to execute arbitrary code on the server, abuse application logic or lead to denial of service.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Java serialization turns object graphs into byte streams containing the objects themselves and the necessary metadata to reconstruct them from the byte stream. Developers can create custom code to aid in the process of deserializing Java objects, where they may even replace the deserialized objects with different objects, or proxies. The customized deserialization process takes place during objects reconstruction before the objects are returned to the application and cast into expected types. By the time developers try to enforce an expected type, code may have already been executed. <br><br>Custom deserialization routines are defined in the serializable classes which need to be present in the runtime classpath and cannot be injected by the attacker so the exploitability of these attacks depends on the classes available in the application environment. Unfortunately, common third party classes or even JDK classes can be abused to exhaust JVM resources, deploy malicious files, or run arbitrary code.<br><br>Certain Spring service exporters use Java serialization behind the scenes at the transport layer. RMI, JMSInvoker and HTTPInvoker are examples of these services.<br><br><b>Example 1:</b> RMIServiceExporter exposing <code>TestService</code> methods.<br></p>
<pre><br>&lt;bean id="testService" class="example.TestServiceImpl"/&gt;<br>&lt;bean class="org.springframework.remoting.rmi.RmiServiceExporter"&gt;<br>    &lt;property name="serviceName" value="TestService"/&gt;<br>    &lt;property name="service" ref="testService"/&gt;<br>    &lt;property name="serviceInterface" value="example.TestService"/&gt;<br>    &lt;property name="registryPort" value="1199"/&gt;<br>&lt;/bean&gt;<br></pre>
<br><br><b>Example 2:</b> JMSInvokerServiceExporter exposing <code>TestService</code> methods.<br><pre><br>&lt;bean id="testService" class="example.TestServiceImpl"/&gt;<br>&lt;bean class="org.springframework.jms.remoting.JmsInvokerServiceExporter"&gt;<br>        &lt;property name="serviceInterface" value="example.TestService"/&gt;<br>        &lt;property name="service" ref="testService"/&gt;<br>&lt;/bean&gt;<br></pre>
<br><br><b>Example 3:</b> HTTPInvokerServiceExporter exposing <code>TestService</code> methods.<br><pre><br>&lt;bean id="testService" class="example.TestServiceImpl"/&gt;<br>&lt;bean class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter"&gt;<br>        &lt;property name="serviceInterface" value="example.TestService"/&gt;<br>        &lt;property name="service" ref="testService"/&gt;<br>&lt;/bean&gt;<br></pre>
<br><h2>REFERENCES</h2>
																								   <p>[1]  <em>HPE Security Fortify Application Defender</em> <br></p>
																									   <p>[2] Oracle <em>Java Serialization</em> <br></p>
																									   <p>[3] IBM <em>Look-ahead Java deserialization</em> <br></p>
																									   <p>[4] OWASP <em>Deserialization of untrusted data</em> <br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration <em>CWE ID 95, CWE ID 494</em> <br></p>
																									   <p>[6] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[7] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Improper Input Handling (WASC-20)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.configuration.java.dynamic_code_evaluation_unsafe_deserialization
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
