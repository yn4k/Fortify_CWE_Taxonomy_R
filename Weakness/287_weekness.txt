<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.controlflow.java.path_manipulation_zip_entry_overwrite -->						
							<h1>
							   Path Manipulation: Zip Entry Overwrite
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to control paths used in filesystem operations could enable an attacker to overwrite files arbitrarily anywhere on the system.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Path Manipulation: ZIP Entry Overwrite errors occur when a ZIP file is opened and expanded without checking the file path of the ZIP entry.<br><br><b>Example 1:</b> The following example extracts files from a ZIP file and writes them to disk.<br><br></p>
<pre><br>  private static final int BUFSIZE = 512;<br>  private static final int TOOBIG = 0x640000;<br>  ...<br>  public final void unzip(String filename) throws IOException {<br>    FileInputStream fis = new FileInputStream(filename);<br>    ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));<br>    ZipEntry zipEntry = null;<br><br>    int numOfEntries = 0;<br>    long total = 0;<br><br>    try{<br>      while ((zipEntry = zis.getNextEntry()) != null){<br>        byte data[] = new byte[BUFSIZE];<br>        int count = 0;<br>        String outFileName = zipEntry.getName();<br>        if (zipEntry.isDirectory()){<br>          new File(outFileName).mkdir(); //create the new directory<br>          continue;<br>        }<br>        FileOutputStream outFile = new FileOutputStream(outFileName);<br>        BufferedOutputStream dest = new BufferedOutputStream(outFile, BUFSIZE);<br>        //read data from ZIP, but do not read huge entries<br>        while (total + BUFSIZE &lt;= TOOBIG &amp;&amp; (count = zis.read(data, 0, BUFSIZE)) != -1){<br>          dest.write(data, 0, count);<br>          total += count;<br>        }<br>        ...<br>      }<br>    }finally{<br>      zis.close();<br>    }<br>  }<br>  ...<br></pre>
<br><br>In the above example, there is no validation of <code>zipEntry.getName()</code> prior to performing read/write functions on the data within this entry. This means that if the ZIP file was originally placed in the directory "<code>/tmp/</code>" of a Unix-based machine, a zipEntry was "<code>../etc/hosts</code>", and the application was run under necessary permissions, it would overwrite the system <code>hosts</code> file. This in turn would allow traffic from the machine to go anywhere the attacker wants, such as back to the attacker's machine.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>IDS04-J. Safely extract files from ZipInputStream</em> CERT<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 22, CWE ID 73</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 <em>Risky Resource Management - CWE ID 426</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 <em>Risky Resource Management - CWE ID 022</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[24] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Path Traversal</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Path Traversal (WASC-33)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.controlflow.java.path_manipulation_zip_entry_overwrite
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
