<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.unchecked_return_value -->						
							<h1>
							   Unchecked Return Value
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Ignoring a method's return value can cause the program to overlook unexpected states and conditions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is not uncommon for Java programmers to misunderstand <code>read()</code> and related methods that are part of many <code>java.io</code> classes. Most errors and unusual events in Java result in an exception being thrown. (This is one of the advantages that Java has over languages like C: Exceptions make it easier for programmers to think about what can go wrong.) But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested.<br><br>This behavior makes it important for programmers to examine the return value from <code>read()</code> and other IO methods to ensure that they receive the amount of data they expect.<br><br><br><br><b>Example:</b> The following code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always exactly 1 kilobyte in size and therefore ignores the return value from <code>read()</code>. If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and handle it as though it belongs to the attacker.<br><br></p>
<pre><br>FileInputStream fis;<br>byte[] byteArray = new byte[1024];<br>for (Iterator i=users.iterator(); i.hasNext();) {<br>    String userName = (String) i.next();<br>    String pFileName = PFILE_ROOT + "/" + userName;<br>    FileInputStream fis = new FileInputStream(pFileName);<br>    fis.read(byteArray); // the file is always 1k bytes<br>    fis.close();<br>    processPFile(userName, byteArray);<br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>EXP00-J. Do not ignore values returned by methods</em> CERT<br></p>
																									   <p>[2]  <em>FIO02-J. Detect and handle file-related errors</em> CERT<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 252, CWE ID 754</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2004 <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - SANS Top 25 2010 <em>Risky Resource Management - CWE ID 754</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.unchecked_return_value
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
