<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.server_side_request_forgery -->						
							<h1>
							   Server-Side Request Forgery
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The application initiates a network connection to a third-party system using user-controlled data to craft the resource URI.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A Server-Side Request Forgery occurs when an attacker can influence a network connection made by the application server. The network connection will originate from the application server internal IP and an attacker will be able to use this connection to bypass network controls and scan or attack internal resources that are not otherwise exposed.<br><br><br><br><b>Example:</b> In the following example, an attacker will be able to control the URL the server is connecting to.<br><br></p>
<pre><br>String url = request.getParameter("url");<br>CloseableHttpClient httpclient = HttpClients.createDefault();<br>HttpGet httpGet = new HttpGet(url);<br>CloseableHttpResponse response1 = httpclient.execute(httpGet);<br></pre>
<br><br>The ability of the attacker to hijack the network connection will depend on the specific part of the URI that he can control and on libraries used to stablish the connection. For example, controlling the URI scheme will let the attacker use protocols different from <code>http</code> or <code>https</code> like:<br><br>- up://<br>- ldap://<br>- jar://<br>- gopher://<br>- mailto://<br>- ssh2://<br>- telnet://<br>- expect://<br><br>An attacker will be able to leverage this hijacked network connection to perform the following attacks:<br><br>- Port Scanning of intranet resources.<br>- Bypass firewalls.<br>- Attack vulnerable programs running on the application server or on the Intranet.<br>- Attack internal/external web applications using Injection attacks or CSRF.<br>- Access local files using file:// scheme.<br>- On Windows systems, file:// scheme and UNC paths can allow an attacker to scan and access internal shares.<br>- Perform a DNS cache poisoning attack.<br><br><h2>REFERENCES</h2>
																								   <p>[1] Alexander Polyakov <em>SSRF vs. Business critical applications</em> BlackHat 2012<br></p>
																									   <p>[2]  <em>SSRF bible. Cheatsheet</em> ONSec Labs<br></p>
																									   <p>[3]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[4] Standards Mapping - Common Weakness Enumeration <em>CWE ID 918</em> <br></p>
																									   <p>[5] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3600 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Abuse of Functionality (WASC-42)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.server_side_request_forgery
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
