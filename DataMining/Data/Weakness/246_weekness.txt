<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.content_provider_uri_injection -->						
							<h1>
							   Content Provider URI Injection
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Constructing a Content Provider query statement that contains user input can allow an attacker to access unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Query string injection vulnerabilities occur when:<br><br>1. Data enters a program from an untrusted source.<br><br><br><br>2. The data is used to dynamically construct a Content Provider query URI.<br><br><br><br>Android content providers enable developers to write queries without SQL by just building content provider URIs. Content provider query URIs are vulnerable to injection attacks and so developers should avoid using string concatenation with tainted data inputs to construct the URI, without ensuring that metacharacters are properly validated or encoded.<br><br><b>Example 1:</b> Given an application that exposes several content providers at URIs:<br><br><code>content://my.authority/messages</code><br><code>content://my.authority/messages/123</code><br><code>content://my.authority/messages/deleted</code><br><br>If developers build the query URIs concatenating strings, then attackers will be able to include slashes in the path or other URI metacharacters that will change the meaning of the query. For example in the code snippet below, they will be able to invoke <code>content://my.authority/messages/deleted</code> by providing a msgId code with value <code>deleted</code>:<br><br></p>
<pre><br>// "msgId" is submitted by users<br>Uri dataUri = Uri.parse(WeatherContentProvider.CONTENT_URI + "/" + msgId);<br>Cursor wCursor1 = getContentResolver().query(dataUri, null, null, null, null);<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 89</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 <em>Insecure Interaction - CWE ID 089</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3540.1 CAT I, APP3540.3 CAT II</em> <br></p>
																									   <p>[24] Standards Mapping - Web Application Security Consortium 24 + 2 <em>SQL Injection</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium Version 2.00 <em>SQL Injection (WASC-19)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.content_provider_uri_injection
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
