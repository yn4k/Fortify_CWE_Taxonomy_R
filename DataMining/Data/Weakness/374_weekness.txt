<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.pci_privacy_violation -->						
							<h1>
							   PCI Privacy Violation
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Mishandling private information, such as customer passwords or social security numbers, can compromise user privacy and is often illegal. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Privacy violations occur when:<br><br>1. Private user information enters the program.<br><br>2. The data is written to an external location, such as the console, file system, or network.<br><br><br><b>Example 1:</b> The following code contains a logging statement that tracks the contents of records added to a database by storing them in a log file. Among other values that are stored, the <code>getPassword()</code> function returns the user-supplied plaintext password associated with the account.<br><br></p>
<pre><br>pass = getPassword();<br>...<br>dbmsLog.println(id+":"+pass+":"+type+":"+tstamp);<br></pre>
<br><br>The code in the example above logs a plaintext password to the filesystem. Although many developers trust the filesystem as a safe storage location for data, it should not be trusted implicitly, particularly when privacy is a concern.<br><br>Privacy is one of the biggest concerns in the mobile world for a couple of reasons. One of them is a much higher chance of device loss. The other has to do with inter-process communication between mobile applications. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. Sensitive information should never be part of inter-process communication between mobile applications.<br><br><b>Example 2:</b> The code below reads username and password for a given site from an Android WebView store and broadcasts them to all the registered receivers.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = credentials[0];<br>    String password = credentials[1];<br>    Intent i = new Intent();<br>    i.setAction("SEND_CREDENTIALS");<br>    i.putExtra("username", username);<br>    i.putExtra("password", password);<br>    view.getContext().sendBroadcast(i);<br>  }<br>});<br>...<br></pre>
<br><br>There are several problems with this example. First of all, by default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites. Second, plaintext credentials are broadcast to all the registered receivers, which means that any receiver registered to listen to intents with the <code>SEND_CREDENTIALS</code> action will receive the message. The broadcast is not even protected with a permission to limit the number of recipients, even though in this case, we do not recommend using permissions as a fix.<br><br>Private data can enter a program in a variety of ways:<br><br>- Directly from the user in the form of a password or personal information<br><br>- Accessed from a database or other data store by the application<br><br>- Indirectly from a partner or other third party<br><br>Typically, in the context of the mobile world, this private information would include (along with passwords, SSNs and other general personal information):<br><br>- Location<br><br>- Cell phone number<br><br>- Serial numbers and device IDs<br><br>- Network Operator information<br><br>- Voicemail information<br><br>Sometimes data that is not labeled as private can have a privacy implication in a different context. For example, student identification numbers are usually not considered private because there is no explicit and publicly-available mapping to an individual student's personal information. However, if a school generates identification numbers based on student social security numbers, then the identification numbers should be considered private.<br><br>Security and privacy concerns often seem to compete with each other. From a security perspective, you should record all important operations so that any anomalous activity can later be identified. However, when private data is involved, this practice can create risk.<br><br>Although there are many ways in which private data can be handled unsafely, a common risk stems from misplaced trust. Programmers often trust the operating environment in which a program runs, and therefore believe that it is acceptable to store private information on the file system, in the registry, or in other locally-controlled resources. However, even if access to certain resources is restricted, this does not guarantee that the individuals who do have access can be trusted. For example, in 2004, an unscrupulous employee at AOL sold approximately 92 million private customer e-mail addresses to a spammer marketing an offshore gambling web site [1].<br><br>In response to such high-profile exploits, the collection and management of private data is becoming increasingly regulated. Depending on its location, the type of business it conducts, and the nature of any private data it handles, an organization may be required to comply with one or more of the following federal and state regulations:<br><br>- Safe Harbor Privacy Framework [3]<br><br>- Gramm-Leach Bliley Act (GLBA) [4]<br><br>- Health Insurance Portability and Accountability Act (HIPAA) [5]<br><br>- California SB-1386 [6]<br><br>Despite these regulations, privacy violations continue to occur with alarming frequency.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] J. Oates <em>AOL man pleads guilty to selling 92m email addies</em> The Register<br></p>
																									   <p>[2]  <em>Privacy Initiatives</em> U.S. Federal Trade Commission<br></p>
																									   <p>[3]  <em>Safe Harbor Privacy Framework</em> U.S. Department of Commerce<br></p>
																									   <p>[4]  <em>Financial Privacy: The Gramm-Leach Bliley Act (GLBA)</em> Federal Trade Commission<br></p>
																									   <p>[5]  <em>Health Insurance Portability and Accountability Act (HIPAA)</em> U.S. Department of Human Services<br></p>
																									   <p>[6]  <em>California SB-1386</em> Government of the State of California<br></p>
																									   <p>[7] M. Howard, D. LeBlanc <em>Writing Secure Code, Second Edition</em> Microsoft Press<br></p>
																									   <p>[8]  <em>SQLCipher.</em> <br></p>
																									   <p>[9]  <em>FUNDAMENTALS-4: Establish trust boundaries</em> Oracle<br></p>
																									   <p>[10]  <em>CONFIDENTIAL-2: Do not log highly sensitive information</em> Oracle<br></p>
																									   <p>[11]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[12] Standards Mapping - Common Weakness Enumeration <em>CWE ID 359</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 8.4</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 3.2, Requirement 3.4, Requirement 4.2, Requirement 6.5.6, Requirement 8.4</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 3.2, Requirement 3.4, Requirement 6.5.5, Requirement 8.4</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 3.2, Requirement 3.4, Requirement 8.2.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 3.2, Requirement 3.4, Requirement 8.2.1</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3210.1 CAT II, APP3310 CAT I, APP3340 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[25] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[26] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Information Leakage</em> <br></p>
																									   <p>[27] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Information Leakage (WASC-13)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        © Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.pci_privacy_violation
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
