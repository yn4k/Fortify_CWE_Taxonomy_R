<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.poor_error_handling_unhandled_ssl_exception -->						
							<h1>
							   Poor Error Handling: Unhandled SSL Exception
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Failing to explicitly handle SSL exceptions can cause the application to overlook unexpected states and conditions.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Unhandled SSL exception vulnerabilities occur when:<br><br>1.	An SSL-specific exception is thrown.<br><br>2.	The exception is not explicitly handled.<br><br>The SSL-specific exceptions <code>javax.net.ssl.SSLHandshakeException</code>, <code>javax.net.ssl.SSLKeyException</code>, and <code>javax.net.ssl.SSLPeerUnverifiedException</code> all convey important errors related to an SSL connection. If these errors are not explicitly handled, the connection can be left in an unexpected and potential insecure state.<br><br>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break.<br><br>Two dubious assumptions that are easy to spot in code are "this operation can never fail" and "it doesn't matter if this operation fails". When a programmer fails to catch an exception that an operation may throw, they implicitly state that they are operating under one of these assumptions.
							</p>
							 								<h2>REFERENCES</h2>
																								   <p>[1] Standards Mapping - Common Weakness Enumeration <em>CWE ID 388</em> <br></p>
																									   <p>[2] Standards Mapping - FIPS200 <em>AU</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[6] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Information Leakage</em> <br></p>
																									   <p>[18] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Information Leakage (WASC-13)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.poor_error_handling_unhandled_ssl_exception
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
