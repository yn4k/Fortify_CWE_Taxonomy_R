<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.weak_cryptographic_hash_user_controlled_salt -->						
							<h1>
							   Weak Cryptographic Hash: User-Controlled Salt
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Methods that generate cryptographic hashes, which are passed a salt, should not be called with a tainted salt argument.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Weak Cryptographic Hash: User-Controlled Salt issues occur when:<br><br>1. Data enters a program through an untrusted source.<br><br>2. The user-controlled data is included within the salt, or used entirely as the salt within a cryptographic hash function.<br><br><br>As with many software security vulnerabilities, Weak Cryptographic Hash: User-Controlled Salt is a means to an end, not an end in and of itself. At its root, the vulnerability is straightforward: an attacker passes malicious data to an application, and the data is then used as all or part of the salt in a cryptographic hash function.<br><br>The problem with having a user-controlled salt is that it can enable various attacks:<br><br>1. The attacker can use this vulnerability to specify an empty salt for the data being hashed. From this, it would be trivial to quickly hash the data being hashed under his control using a number of different hashing algorithms to leak information about the hashing implementation used within your application. This could make "cracking" other data values easier by being able to limit the particular variant of hash used.<br>2. If the attacker can manipulate other users' salts, or trick other users into using an empty salt, this would enable them to compute "rainbow tables" for the application and more easily determine the hashed values.<br><br><b>Example 1:</b> The following code uses a user-controlled salt for password hashing:<br></p>
<pre><br>    ...<br>    Properties prop = new Properties();<br>    prop.load(new FileInputStream("local.properties"));<br>    String salt = prop.getProperty("salt");<br>    ...<br>    MessageDigest digest = MessageDigest.getInstance("SHA-256");<br>    digest.reset();<br>    digest.update(salt);<br>    return digest.digest(password.getBytes("UTF-8"));<br>    ...<br></pre>
<br><br>The above code will run successfully, but anyone who can get to this functionality will be able to manipulate the salt used to hash the password by modifying the property <code>salt</code>. Once the program has shipped, it can be very difficult to undo an issue regarding user-controlled salts, as one would likely have no way of knowing whether or not a password hash had its salt determined by a malicious user.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 328</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>MP</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3150.1 CAT II</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3150.1 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.weak_cryptographic_hash_user_controlled_salt
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
