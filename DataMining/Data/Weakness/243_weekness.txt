<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.android_class_loading_hijacking -->						
							<h1>
							   Android Class Loading Hijacking
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Loading classes from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Android Class Loading Hijacking vulnerabilities take two forms:<br><br>- An attacker can change the name of the directories that the program searches to load classes, thereby pointing the path to one that they have control over: the attacker explicitly controls the paths which should be searched for classes.<br><br>- An attacker can change the environment in which the class loads: the attacker implicitly controls what the path name means.<br><br>In this case we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the directories searched for classes to load. Android Class Loading Hijacking vulnerabilities of this type occur when:<br><br>1. Data enters the application from an untrusted source.<br><br><br><br>2. The data is used as or as part of a string representing a library directory to search for classes to load.<br><br><br><br>3. By executing code from the library path, the application gives the attacker a privilege or capability that the attacker would not otherwise have.<br><br><b>Example 1:</b> The following code uses the user changeable <code>userClassPath</code> to determine the directory in which to search for classes to load.<br><br></p>
<pre><br>...<br>  productCategory = this.getIntent().getExtras().getString("userClassPath");<br>  DexClassLoader dexClassLoader = new DexClassLoader(productCategory, optimizedDexOutputPath.getAbsolutePath(), null, getClassLoader());<br>  ...<br></pre>
<br><br>This code allows an attacker to load a library and potentially execute arbitrary code with the elevated privilege of the app by being able to modify the result of <code>userClassPath</code> to point to a different path, which they control. Because the program does not validate the value read from the environment, if an attacker can control the value of <code>userClassPath</code>, then they can fool the application into pointing to a directory that they control and therefore load the classes that they have defined, using the same privileges as the original app.<br><br><b>Example 2:</b> The following code uses the user changeable <code>userOutput</code> to determine the directory the optimized DEX files should be written.<br><br><pre><br>...<br>  productCategory = this.getIntent().getExtras().getString("userOutput");<br>  DexClassLoader dexClassLoader = new DexClassLoader(sanitizedPath, productCategory, null, getClassLoader());<br>...<br></pre>
<br><br>This code allows an attacker to specify the output directory for Optimized DEX files (ODEX). This then allows a malicious user to change the value of <code>userOutput</code> to a directory that they control, such as external storage. Once this is achieved, it is simply a matter of replacing the outputted ODEX file with a malicious ODEX file to have this executed with the same privileges as the original application.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Android Class Loading Hijacking</em> Symantec<br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 114</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.android_class_loading_hijacking
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
