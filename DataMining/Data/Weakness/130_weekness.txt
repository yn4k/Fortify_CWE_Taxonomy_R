<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.unsafe_mobile_code_unsafe_array_declaration -->						
							<h1>
							   Unsafe Mobile Code: Unsafe Array Declaration
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The program violates secure coding principles for mobile code by declaring an array <code>public</code>, <code>final</code> and <code>static</code>.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  In most cases an array declared <code>public</code>, <code>final</code> and <code>static</code> is a bug. Because arrays are mutable objects, the <code>final</code> constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. In most situations the array should be made <code>private</code>.<br><br><b>Example 1:</b> The following Java Applet code mistakenly declares an array <code>public</code>, <code>final</code> and <code>static</code>.<br><br></p>
<pre><br>public final class urlTool extends Applet {<br>public final static URL[] urls;<br>	...<br>}<br></pre>
<br><br>Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your program is running.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] G. McGraw <em>Securing Java. Chapter 7: Java Security Guidelines</em> <br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 582</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[4] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[6] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authorization (WASC-02)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.unsafe_mobile_code_unsafe_array_declaration
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
