<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.controlflow.java.code_correctness_call_to_sleep_in_lock -->						
							<h1>
							   Code Correctness: Call to sleep() in Lock
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Calling <code>sleep()</code> while holding a lock can cause a loss of performance and might cause a deadlock.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  If multiple threads are trying to obtain a lock on a resource, calling <code>sleep()</code> while holding a lock can cause all of the other threads to wait for the resource to be released, which can result in degraded performance and deadlock.<br><br><b>Example 1:</b> The following code calls <code>sleep()</code> while holding a lock.<br></p>
<pre><br>ReentrantLock rl = new ReentrantLock();<br>...<br>rl.lock();<br>Thread.sleep(500);<br>...<br>rl.unlock();<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>LCK09-J. Do not perform operations that can block while holding a lock</em> CERT<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 557</em> <br></p>
																									   <p>[3] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-5 Denial of Service Protection (P1)</em> <br></p>
																									   <p>[4] Standards Mapping - OWASP Top 10 2004 <em>A9 Application Denial of Service</em> <br></p>
																									   <p>[5] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.9</em> <br></p>
																									   <p>[6] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP6080 CAT II</em> <br></p>
																									   <p>[7] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP6080 CAT II</em> <br></p>
																									   <p>[8] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP6080 CAT II</em> <br></p>
																									   <p>[9] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP6080 CAT II</em> <br></p>
																									   <p>[10] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP6080 CAT II</em> <br></p>
																									   <p>[11] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP6080 CAT II</em> <br></p>
																									   <p>[12] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Denial of Service</em> <br></p>
																									   <p>[13] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Denial of Service (WASC-10)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.controlflow.java.code_correctness_call_to_sleep_in_lock
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
