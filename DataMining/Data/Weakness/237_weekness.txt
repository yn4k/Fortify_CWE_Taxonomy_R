<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.poor_error_handling_return_inside_finally -->						
							<h1>
							   Poor Error Handling: Return Inside Finally
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Returning from inside a <code>finally</code> block will cause exceptions to be lost.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  A return statement inside a <code>finally</code> block will cause any exception that might be thrown in the try block to be discarded.<br><br><b>Example 1:</b> In the following code excerpt, the <code>MagicException</code> thrown by the second call to <code>doMagic</code> with <code>true</code> passed to it will never be delivered to the caller. The return statement inside the <code>finally</code> block will cause the exception to be discarded.<br><br></p>
<pre><br>public class MagicTrick {<br><br>public static class MagicException extends Exception { }<br><br>public static void main(String[] args) {<br><br>  System.out.println("Watch as this magical code makes an " +<br>                     "exception disappear before your very eyes!");<br><br>  System.out.println("First, the kind of exception handling " +<br>                     "you're used to:");<br>  try {<br>    doMagic(false);<br>  } catch (MagicException e) {<br>    // An exception will be caught here<br>    e.printStackTrace();<br>  }<br><br>  System.out.println("Now, the magic:");<br>  try {<br>    doMagic(true);<br>  } catch (MagicException e) {<br>    // No exception caught here, the finally block ate it<br>    e.printStackTrace();<br>  }<br>  System.out.println("tada!");<br>}<br><br>public static void doMagic(boolean returnFromFinally)<br>throws MagicException {<br><br>  try {<br>    throw new MagicException();<br>  }<br>  finally {<br>    if (returnFromFinally) {<br>      return;<br>    }<br>  }<br>}<br><br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>ERR04-J. Do not complete abruptly from a finally block</em> CERT<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 584</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>AU</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-11 Error Handling (P2)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Top 10 2004 <em>A7 Improper Error Handling</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2007 <em>A6 Information Leakage and Improper Error Handling</em> <br></p>
																									   <p>[7] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.7</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.2, Requirement 6.5.6</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.5</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3120 CAT II</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3120 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3120 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3120 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3120 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3120 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.poor_error_handling_return_inside_finally
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
