<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.password_management -->						
							<h1>
							   Password Management
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Storing a password in plaintext can result in a system compromise.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Password management issues occur when a password is stored in plaintext in an application's properties or configuration file.<br><br><b>Example 1:</b> The following code reads a password from a properties file and uses the password to connect to a database.<br><br></p>
<pre><br>...<br>Properties prop = new Properties();<br>prop.load(new FileInputStream("config.properties"));<br>String password = prop.getProperty("password");<br><br>DriverManager.getConnection(url, usr, password);<br>...<br></pre>
<br><br>This code will run successfully, but anyone who has access to config.properties can read the value of <code>password</code>. If a devious employee has access to this information, they can use it to break into the system.<br><br>In the mobile world, password management is even trickier, considering a much higher chance of device loss.<br><b>Example 2:</b> The code below reads username and password from an Android WebView store and uses them to setup authentication for viewing protected pages.<br><pre><br>...<br>webview.setWebViewClient(new WebViewClient() {<br>  public void onReceivedHttpAuthRequest(WebView view,<br>        HttpAuthHandler handler, String host, String realm) {<br>    String[] credentials = view.getHttpAuthUsernamePassword(host, realm);<br>    String username = credentials[0];<br>    String password = credentials[1];<br>    handler.proceed(username, password);<br>  }<br>});<br>...<br></pre>
<br><br>By default, WebView credentials are stored in plaintext and are not hashed. So if a user has a rooted device (or uses an emulator), she is able to read stored passwords for given sites.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>SQLCipher.</em> <br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 256</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>IA</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-28 Protection of Information at Rest (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M2 Insecure Data Storage</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3210.1 CAT II, APP3340 CAT I</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.password_management
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
