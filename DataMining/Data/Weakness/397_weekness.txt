<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.structural.java.privilege_management_overly_broad_access_specifier -->						
							<h1>
							   Privilege Management: Overly Broad Access Specifier
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Privileged code in <code>public</code> methods can be called from anywhere in the JVM.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Secure coding principles advocate making access specifiers as restrictive as possible. A method with a <code>public</code> access specifier means that any external code is allowed to call it. Public methods that perform privileged actions can be dangerous when code is shared in libraries or in environments where code can dynamically enter the system (e.g. Code Injection, Dangerous File Inclusion, File Upload, etc).<br><br><br><br><b>Example 1:</b> In the following code, <code>doPrivilegedOpenFile()</code> is declared <code>public</code> and performs a privileged operation.<br></p>
<pre><br>public static void doPrivilegedOpenFile(final String filePath) {<br>final BadFileNamePrivilegedAction pa = new BadFileNamePrivilegedAction(filePath);<br><br>FileInputStream fis = null;<br>...<br>fis = (FileInputStream)AccessController.doPrivileged(pa);<br>...<br>}<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Secure Coding Guidelines for the Java Programming Language, version 2.0</em> Sun Microsystems, Inc.<br></p>
																									   <p>[2] M. S. Ware <em>Writing secure Java code: taxonomy of heuristics and an evaluation of static analysis tools</em> <br></p>
																									   <p>[3]  <em>FUNDAMENTALS-3: Restrict privileges</em> Oracle<br></p>
																									   <p>[4]  <em>ACCESS-3: Safely invoke java.security.AccessController.doPrivileged</em> Oracle<br></p>
																									   <p>[5] Standards Mapping - Common Weakness Enumeration <em>CWE ID 265</em> <br></p>
																									   <p>[6] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-6 Least Privilege (P1)</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.5.7, Requirement 7.2</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.10</em> <br></p>
																									   <p>[12] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3500 CAT II</em> <br></p>
																									   <p>[13] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3500 CAT II</em> <br></p>
																									   <p>[14] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3500 CAT II</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3500 CAT II</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3500 CAT II</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3500 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authorization</em> <br></p>
																									   <p>[19] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authorization (WASC-02)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.structural.java.privilege_management_overly_broad_access_specifier
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
