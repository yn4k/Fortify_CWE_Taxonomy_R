<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.insecure_randomness_user_controlled_seed -->						
							<h1>
							   Insecure Randomness: User-Controlled Seed
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Functions that generate random or pseudorandom values, which are passed a seed, should not be called with a tainted integer argument.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  <code>Random.setSeed()</code> should not be called with a tainted integer argument. Doing so allows an attacker to control the value used to seed the pseudorandom number generator, and therefore predict the sequence of values (usually integers) produced by calls to <code>Random.nextInt()</code>, <code>Random.nextShort()</code>, <code>Random.nextLong()</code>, or returned by <code>Random.nextBoolean()</code>, or set in <code>Random.nextBytes(byte[])</code>.<br></p>
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Java Cryptography Architecture</em> Sun Microsystems<br></p>
																									   <p>[2] J. Viega, G. McGraw <em>Building Secure Software</em> Addison-Wesley<br></p>
																									   <p>[3] Elaine Barker and John Kelsey <em>NIST Special Publication 800-90A: Recommendation for Random Number Generation Using Deterministic Random Bit Generators</em> NIST<br></p>
																									   <p>[4] Elaine Barker and John Kelsey <em>NIST DRAFT Special Publication 800-90B: Recommendation for the Entropy Sources Used for Random Bit Generation</em> NIST<br></p>
																									   <p>[5] Elaine Barker and John Kelsey <em>DRAFT NIST Special Publication 800-90C: Recommendation for Random Bit Generator (RBG) Constructions</em> NIST<br></p>
																									   <p>[6]  <em>MSC02-J. Generate strong random numbers</em> CERT<br></p>
																									   <p>[7]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[8] Standards Mapping - Common Weakness Enumeration <em>CWE ID 335</em> <br></p>
																									   <p>[9] Standards Mapping - FIPS200 <em>MP</em> <br></p>
																									   <p>[10] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-13 Cryptographic Protection (P1)</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.3, Requirement 6.5.8</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.3</em> <br></p>
																									   <p>[20] Standards Mapping - SANS Top 25 2009 <em>Porous Defenses - CWE ID 330</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[25] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3150.2 CAT II</em> <br></p>
																									   <p>[26] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3150.2 CAT II</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.insecure_randomness_user_controlled_seed
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
