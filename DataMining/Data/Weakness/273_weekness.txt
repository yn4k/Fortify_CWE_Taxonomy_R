<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.json_injection -->						
							<h1>
							   JSON Injection
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  The method writes unvalidated input into JSON. This call could allow an attacker to inject arbitrary elements or attributes into the JSON entity.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  JSON injection occurs when:<br><br>1. Data enters a program from an untrusted source.<br><br><br>2. The data is written to a JSON stream.<br><br>Applications typically use JSON to store data or send messages. When used to store data, JSON is often treated like cached data and may potentially contain sensitive information. When used to send messages, JSON is often used in conjunction with a RESTful service and can be used to transmit sensitive information such as authentication credentials.<br><br>The semantics of JSON documents and messages can be altered if an application constructs JSON from unvalidated input. In a relatively benign case, an attacker may be able to insert extraneous elements that cause an application to throw an exception while parsing a JSON document or request. In a more serious case, such as that involving JSON injection, an attacker may be able to insert extraneous elements that allow for the predictable manipulation of business critical values within a JSON document or request. In some cases, JSON injection can lead to cross-site scripting or dynamic code evaluation.<br><br><b>Example 1: </b>The following Java code uses Jackson to serialize user account authentication information for non-privileged users (those with a role of "default" as opposed to privileged users with a role of "admin") from user-controlled input variables <code>username</code> and <code>password</code> to the JSON file located at <code>~/user_info.json</code>:<br><br></p>
<pre><br>...<br><br>JsonFactory jfactory = new JsonFactory();<br><br>JsonGenerator jGenerator = jfactory.createJsonGenerator(new File("~/user_info.json"), JsonEncoding.UTF8);<br><br>jGenerator.writeStartObject();<br><br>jGenerator.writeFieldName("username");<br>jGenerator.writeRawValue("\"" + username + "\"");<br><br>jGenerator.writeFieldName("password");<br>jGenerator.writeRawValue("\"" + password + "\"");<br><br>jGenerator.writeFieldName("role");<br>jGenerator.writeRawValue("\"default\"");<br><br>jGenerator.writeEndObject();<br><br>jGenerator.close();<br></pre>
<br><br>Yet, because the JSON serialization is performed using <code>JsonGenerator.writeRawValue()</code>, the untrusted data in <code>username</code> and <code>password</code> will not be validated to escape JSON-related special characters. This allows a user to arbitrarily insert JSON keys, possibly changing the structure of the serialized JSON. In this example, if the non-privileged user <code>mallory</code> with password <code>Evil123!</code> were to append <code>","role":"admin</code> to her username when entering it at the prompt that sets the value of the <code>username</code> variable, the resulting JSON saved to <code>~/user_info.json</code> would be:<br><br><pre><br>{<br>  "username":"mallory",<br>  "role":"admin",<br>  "password":"Evil123!",<br>  "role":"default"<br>}<br></pre>
<br><br>If this serialized JSON file were then deserialized to an <code>HashMap</code> object with Jackson's <code>JsonParser</code> as so:<br><br><pre><br>JsonParser jParser = jfactory.createJsonParser(new File("~/user_info.json"));<br><br>while (jParser.nextToken() != JsonToken.END_OBJECT) {<br><br>  String fieldname = jParser.getCurrentName();<br><br>  if ("username".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if ("password".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if ("role".equals(fieldname)) {<br>    jParser.nextToken();<br>    userInfo.put(fieldname, jParser.getText());<br>  }<br><br>  if (userInfo.size() == 3)<br>    break;<br>}<br><br>jParser.close();<br></pre>
<br><br>The resulting values for the <code>username</code>, <code>password</code>, and <code>role</code> keys in the <code>HashMap</code> object would be <code>mallory</code>, <code>Evil123!</code>, and <code>admin</code> respectively. Without further verification that the deserialized JSON values are valid, the application will incorrectly assign user <code>mallory</code> "admin" privileges.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 91</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Improper Input Handling (WASC-20)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.json_injection
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
