<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.process_control -->						
							<h1>
							   Process Control
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Process control vulnerabilities take two forms:<br><br>- An attacker can change the name of the library that the program loads: the attacker explicitly controls what the name of the library is.<br><br>- An attacker can change the environment in which the library loads: the attacker implicitly controls what the library name means.<br><br>In this case we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the name of the library that is loaded. Process control vulnerabilities of this type occur when:<br><br>1. Data enters the application from an untrusted source.<br><br><br><br>2. The data is used as or as part of a string representing a library that is loaded by the application.<br><br><br><br>3. By executing code from the library, the application gives the attacker a privilege or capability that the attacker would not otherwise have.<br><br><b>Example 1:</b> The following code from a privileged system utility uses the system property <code>APPHOME</code> to determine the directory in which it is installed and then loads a native library based on a relative path from the specified directory.<br><br></p>
<pre><br>...<br>	String home = System.getProperty("APPHOME");<br>	String lib = home + LIBNAME;<br>	java.lang.Runtime.getRuntime().load(lib);<br>	...<br></pre>
<br><br>This code allows an attacker to load a library and potentially execute arbitrary code with the elevated privilege of the application by modifying the system property <code>APPHOME</code> to point to a different path containing a malicious version of <code>LIBNAME</code>. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property <code>APPHOME</code>, then they can fool the application into running malicious code and take control of the system.<br><br><b>Example 2:</b> The following code uses <code>System.loadLibrary()</code> to load code from a native library named <code>library.dll</code>, which is normally found in a standard system directory.<br><br><pre><br>...<br>System.loadLibrary("library.dll");<br>...<br></pre>
<br><br>The problem here is that <code>System.loadLibrary()</code> accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]:<br><br>A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner.<br><br>If an attacker is able to place a malicious copy of <code>library.dll</code> higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's <code>library.dll</code> will now be run with elevated privileges, possibly giving them complete control of the system.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>Java 1.4.2 API Documentation</em> Sun Microsystems<br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 114, CWE ID 494</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A1 Unvalidated Input</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Improper Input Handling (WASC-20)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.process_control
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
