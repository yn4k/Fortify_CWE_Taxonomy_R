<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.file_permission_manipulation -->						
							<h1>
							   File Permission Manipulation
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Allowing user input to directly alter file permissions may enable an attacker to access otherwise protected system resources.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  File permission manipulation errors occur when any of the following conditions are met:<br><br>1. An attacker may specify a path used in an operation that modifies permissions on the file system.<br><br>2. An attacker may specify the permissions assigned by an operation on the filesystem.<br><br><br><br><b>Example 1:</b> The following code uses input from system properties to set the default permission mask. If attackers may alter the system properties, they may use the program to gain access to files manipulated by the program. If the program is also vulnerable to path manipulation, an attacker may use this vulnerability to access arbitrary files on system.<br><br></p>
<pre><br>  String permissionMask = System.getProperty("defaultFileMask");<br>  Path filePath = userFile.toPath();<br>  ...<br>  Set&lt;PosixFilePermission&gt; perms = PosixFilePermissions.fromString(permissionMask);<br>  Files.setPosixFilePermissions(filePath, perms);<br>...<br></pre>
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>FIO01-J. Create files with appropriate access permissions</em> CERT<br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 264, CWE ID 732</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M8 Security Decisions Via Untrusted Inputs</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A2 Broken Access Control</em> <br></p>
																									   <p>[8] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.2</em> <br></p>
																									   <p>[9] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[13] Standards Mapping - SANS Top 25 2009 <em>Porous Defenses - CWE ID 732</em> <br></p>
																									   <p>[14] Standards Mapping - SANS Top 25 2010 <em>Porous Defenses - CWE ID 732</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2011 <em>Porous Defenses - CWE ID 732</em> <br></p>
																									   <p>[16] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Improper Input Handling (WASC-20)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.file_permission_manipulation
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
