<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.access_control_database -->						
							<h1>
							   Access Control: Database
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Database access control errors occur when:<br><br>1.	Data enters a program from an untrusted source.<br><br><br>2.	The data is used to specify the value of a primary key in a SQL query.<br><br><br><b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user.<br><br></p>
<pre><br>...<br>id = Integer.decode(request.getParameter("invoiceID"));<br>String query = "SELECT * FROM invoices WHERE id = ?";<br>PreparedStatement stmt = conn.prepareStatement(query);<br>stmt.setInt(1, id);<br>ResultSet results = stmt.execute();<br>...<br></pre>
<br><br>The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user.<br><br>Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 2:</b> The following code adapts Example 1 to the Android platform.<br><br><pre><br>...<br>        String id = this.getIntent().getExtras().getString("invoiceID");<br>        String query = "SELECT * FROM invoices WHERE id = ?";<br>        SQLiteDatabase db = this.openOrCreateDatabase("DB", MODE_PRIVATE, null);<br>        Cursor c = db.rawQuery(query, new Object[]{id});<br>...<br></pre>
<br><br>A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Struts 2 are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1] S. J. Friedl <em>SQL Injection Attacks by Example</em> <br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 566</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>AC</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>AC-3 Access Enforcement (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M5 Poor Authorization and Authentication</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A2 Broken Access Control</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A4 Insecure Direct Object Reference</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A4 Insecure Direct Object References</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.2</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.5.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.8</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2011 <em>Porous Defenses - CWE ID 863</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3480.1 CAT II</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3480.1 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium 24 + 2 <em>Insufficient Authorization</em> <br></p>
																									   <p>[24] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Insufficient Authorization (WASC-02)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.access_control_database
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
