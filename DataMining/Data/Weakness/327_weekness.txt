<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.xquery_injection -->						
							<h1>
							   XQuery Injection
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Constructing a dynamic XQuery expression with user input could allow an attacker to modify the statement's meaning. 
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XQuery injection occurs when:<br><br>  1.      Data enters a program from an untrusted source.<br><br><br><br>  2.      The data used to dynamically construct an XQuery expression.<br><br><br><br><b>Example 1:</b> The following code dynamically constructs and executes an XQuery expression that retrieves an user for a given username and password combination. The username and password are read from an HTTP request, and is therefore untrusted.<br><br></p>
<pre><br>  ...<br>  XQDataSource xqs = new XQDataSource();<br>  XQConnection conn = xqs.getConnection();<br>  String query = "for \$user in doc(users.xml)//user[username='" + request.getParameter("username") + "'and pass='" + request.getParameter("password") + "'] return \$user";<br><br>  XQPreparedExpression xqpe = conn.prepareExpression(query);<br><br>  XQResultSequence rs = xqpe.executeQuery();<br><br>  ...<br></pre>
<br><br>  Under normal conditions, such as searching for an user with the appropriate username and password, the expression that this code executes will look like the following:<br><br><code>for \$user in doc(users.xml)//user[username='test_user' and pass='pass123'] return \$user</code><br><br>  However, because the expression is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if <code>username</code> or <code>password</code> does not contain a single-quote character. If an attacker enters the string <code>admin' or 1=1 or ''='</code> for <code>username</code>, then the query becomes the following:<br><br><code>for \$user in doc(users.xml)//user[username='admin' or 1=1 or ''='' and password='x' or ''=''] return \$user</code><br><br>  The addition of the <code>admin' or 1=1 or ''='</code> condition causes the XQuery expression to always evaluate to true, so the query becomes logically equivalent to the much simpler query:<br><br><code>//user[username='admin']</code><br><br>  This simplification of the query allows the attacker to bypass the requirement that the query match the password; the query now returns the admin user stored in the document, regardless of the entered password.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[2] Standards Mapping - Common Weakness Enumeration <em>CWE ID 652</em> <br></p>
																									   <p>[3] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I</em> <br></p>
																									   <p>[16] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Web Application Security Consortium Version 2.00 <em>XQuery Injection (WASC-46)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.xquery_injection
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
