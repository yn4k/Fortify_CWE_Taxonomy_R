<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.dataflow.java.command_injection -->						
							<h1>
							   Command Injection
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Executing commands from an untrusted source or in an untrusted environment can cause an application to execute malicious commands on behalf of an attacker.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  Command injection vulnerabilities take two forms:<br><br>- An attacker can change the command that the program executes: the attacker explicitly controls what the command is.<br><br>- An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.<br><br>In this case we are primarily concerned with the first scenario, the possibility that an attacker may be able to control the command that is executed. Command injection vulnerabilities of this type occur when:<br><br>1. Data enters the application from an untrusted source.<br><br>2. The data is used as or as part of a string representing a command that is executed by the application.<br><br>3. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.<br><br><b>Example 1:</b> The following code from a system utility uses the system property <code>APPHOME</code> to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory.<br><br></p>
<pre><br>	...<br>	String home = System.getProperty("APPHOME");<br>	String cmd = home + INITCMD;<br>	java.lang.Runtime.getRuntime().exec(cmd);<br>	...<br></pre>
<br><br>The code in Example 1 allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property <code>APPHOME</code> to point to a different path containing a malicious version of <code>INITCMD</code>. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property <code>APPHOME</code>, then they can fool the application into running malicious code and take control of the system.<br><br><b>Example 2:</b> The following code is from an administrative web application designed to allow users to kick off a backup of an Oracle database using a batch-file wrapper around the <code>rman</code> utility and then run a <code>cleanup.bat</code> script to delete some temporary files. The script <code>rmanDB.bat</code> accepts a single command line parameter, which specifies the type of backup to perform. Because access to the database is restricted, the application runs the backup as a privileged user.<br><br><pre><br>...<br>String btype = request.getParameter("backuptype");<br>String cmd = new String("cmd.exe /K<br>\"c:\\util\\rmanDB.bat "+btype+"&amp;&amp;c:\\util\\cleanup.bat\"")<br>System.Runtime.getRuntime().exec(cmd);<br>...<br></pre>
<br><br>The problem here is that the program does not do any validation on the <code>backuptype</code> parameter read from the user. Typically the <code>Runtime.exec()</code> function will not execute multiple commands, but in this case the program first runs the <code>cmd.exe</code> shell in order to run multiple commands with a single call to <code>Runtime.exec()</code>. Once the shell is invoked, it will allow for the execution of multiple commands separated by two ampersands. If an attacker passes a string of the form <code>"&amp;&amp; del c:\\dbms\\*.*"</code>, then the application will execute this command along with the others specified by the program. Because of the nature of the application, it runs with the privileges necessary to interact with the database, which means whatever command the attacker injects will run with those privileges as well.<br><br><b>Example 3:</b> The following code is from a web application that allows users access to an interface through which they can update their password on the system. Part of the process for updating passwords in certain network environments is to run a <code>make</code> command in the <code>/var/yp</code> directory, the code for which is shown below.<br><br><pre><br>...<br>System.Runtime.getRuntime().exec("make");<br>...<br></pre>
<br><br>The problem here is that the program does not specify an absolute path for make and fails to clean its environment prior to executing the call to <code>Runtime.exec()</code>. If an attacker can modify the <code>$PATH</code> variable to point to a malicious binary called <code>make</code> and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's <code>make</code> will now be run with these privileges, possibly giving the attacker complete control of the system.<br><br>Some think that in the mobile world, classic vulnerabilities, such as command injection, do not make sense -- why would a user attack him or herself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication.<br><br><b>Example 4:</b> The following code reads commands to be executed from an Android intent.<br><br><pre><br>...<br>        String[] cmds = this.getIntent().getStringArrayExtra("commands");<br>	Process p = Runtime.getRuntime().exec("su");<br>        DataOutputStream os = new DataOutputStream(p.getOutputStream());<br>        for (String cmd : cmds) {<br>        	os.writeBytes(cmd+"\n");<br>        }<br>        os.writeBytes("exit\n");<br>        os.flush();<br>...<br></pre>
<br><br>On a rooted device, a malicious application can force a victim application to execute arbitrary commands with super user privileges.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>IDS07-J. Sanitize untrusted data passed to the Runtime.exec() method</em> CERT<br></p>
																									   <p>[2]  <em>INPUT-1: Validate inputs</em> Oracle<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 77, CWE ID 78</em> <br></p>
																									   <p>[4] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[5] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M7 Client Side Injection</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[10] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[15] Standards Mapping - SANS Top 25 2009 <em>Insecure Interaction - CWE ID 116</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2010 <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[17] Standards Mapping - SANS Top 25 2011 <em>Insecure Interaction - CWE ID 078</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3570 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Web Application Security Consortium 24 + 2 <em>OS Commanding</em> <br></p>
																									   <p>[25] Standards Mapping - Web Application Security Consortium Version 2.00 <em>OS Commanding (WASC-31)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        © Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.dataflow.java.command_injection
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
