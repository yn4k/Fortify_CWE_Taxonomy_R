<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.xxe_injection -->						
							<h1>
							   XML External Entity Injection
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Using XML parsers configured to not prevent nor limit external entities resolution can expose the parser to an XML External Entities attack
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  XML External Entities attacks benefit from an XML feature to build documents dynamically at the time of processing. An XML entity allows inclusion of data dynamically from a given resource. External entities allow an XML document to include data from an external URI. Unless configured to do otherwise, external entities force the XML parser to access the resource specified by the URI, e.g., a file on the local machine or on a remote system. This behavior exposes the application to XML External Entity (XXE) attacks, which can be used to perform denial of service of the local system, gain unauthorized access to files on the local machine, scan remote machines, and perform denial of service of remote systems.<br><br>The following XML document shows an example of an XXE attack.<br></p>
<pre><br>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;<br> &lt;!DOCTYPE foo [<br>  &lt;!ELEMENT foo ANY &gt;<br>  &lt;!ENTITY xxe SYSTEM "file:///dev/random" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;<br></pre>
<br><br>This example could crash the server (on a UNIX system), if the XML parser attempts to substitute the entity with the contents of the /dev/random file.<br><h2>REFERENCES</h2>
																								   <p>[1]  <em>XML External Entity (XXE) Processing</em> OWASP<br></p>
																									   <p>[2]  <em>Testing for XML Injection (OWASP-DV-008)</em> OWASP<br></p>
																									   <p>[3]  <em>XML External Entities</em> The Web Application Security Consortium<br></p>
																									   <p>[4]  <em>IDS17-J. Prevent XML External Entity Attacks</em> CERT<br></p>
																									   <p>[5]  <em>DOS-1: Beware of activities that may use disproportionate resources</em> Oracle<br></p>
																									   <p>[6]  <em>INJECT-5: Restrict XML inclusion</em> Oracle<br></p>
																									   <p>[7] Standards Mapping - Common Weakness Enumeration <em>CWE ID 611</em> <br></p>
																									   <p>[8] Standards Mapping - FIPS200 <em>SI</em> <br></p>
																									   <p>[9] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SI-10 Information Input Validation (P1)</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M4 Unintended Data Leakage</em> <br></p>
																									   <p>[11] Standards Mapping - OWASP Top 10 2004 <em>A6 Injection Flaws</em> <br></p>
																									   <p>[12] Standards Mapping - OWASP Top 10 2007 <em>A2 Injection Flaws</em> <br></p>
																									   <p>[13] Standards Mapping - OWASP Top 10 2010 <em>A1 Injection</em> <br></p>
																									   <p>[14] Standards Mapping - OWASP Top 10 2013 <em>A1 Injection</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 6.5.6</em> <br></p>
																									   <p>[16] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 6.3.1.1, Requirement 6.5.2</em> <br></p>
																									   <p>[17] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[18] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[19] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 6.5.1</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3510 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3510 CAT I, APP3810 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3510 CAT I, APP3810 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3510 CAT I, APP3810 CAT I</em> <br></p>
																									   <p>[24] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3510 CAT I, APP3810 CAT I</em> <br></p>
																									   <p>[25] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3510 CAT I, APP3810 CAT I</em> <br></p>
																									   <p>[26] Standards Mapping - Web Application Security Consortium Version 2.00 <em>XML External Entities (WASC-43)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.xxe_injection
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
