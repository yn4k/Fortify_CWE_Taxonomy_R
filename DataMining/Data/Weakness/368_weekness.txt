<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>Software Security | Protect your Software at the Source | HPE Security Fortify</title>
<link rel="stylesheet" href="../css/vcmain.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<script language="javascript">

					if (top.location == self.location)
					{ //if page is not in its frameset
					//top.location.href = "/vulncat/index.html?open=" + window.location.href;
					}

				</script><!-- End of document.header.tile --><body class="level3"><div id="theWrapper">
						<div id="theContentCenter">
							<!-- desc.semantic.java.key_management_empty_hmac_key -->						
							<h1>
							   Key Management: Empty HMAC Key
							</h1>
							<h2>ABSTRACT</h2>
							<p>
							  Empty HMAC keys could compromise system security in a way that cannot be easily remedied.
							</p>
							<h2>EXPLANATION</h2>
							<p>
							  It is never a good idea to use an empty HMAC key. The cryptographic strength of HMAC depends on the size of the secret key, which is used for the calculation and verification of the message authentication values. Using an empty key undermines the cryptographic strength of the HMAC function.<br><br><br><b>Example:</b> The following code uses an empty key to compute the HMAC:<br></p>
<pre><br>...<br>private static String hmacKey = "";<br>byte[] keyBytes = hmacKey.getBytes();<br>...<br>SecretKeySpec key = new SecretKeySpec(keyBytes, "SHA1");<br>Mac hmac = Mac.getInstance("HmacSHA1");<br>hmac.init(key);<br>...<br></pre>
<br><br>The code above may run successfully, but anyone who has access to it will be able to figure out that it uses an empty HMAC key. Once the program has shipped, there is no going back from the empty HMAC key unless the program is patched. A devious employee with access to this information could use it to compromise the HMAC function. Also, the code above is vulnerable to forgery and key recovery attacks.
							
							 								<h2>REFERENCES</h2>
																								   <p>[1]  <em>RFC 2104 - HMAC: Keyed-Hashing for Message Authentication</em> Internet Engineering Task Force (IETF)<br></p>
																									   <p>[2]  <em>New Results on NMAC/HMAC when Instantiated with Popular Hash Functions</em> Journal of Universal Computer Science (J.UCS)<br></p>
																									   <p>[3] Standards Mapping - Common Weakness Enumeration <em>CWE ID 321</em> <br></p>
																									   <p>[4] Standards Mapping - FIPS200 <em>IA</em> <br></p>
																									   <p>[5] Standards Mapping - NIST Special Publication 800-53 Revision 4 <em>SC-12 Cryptographic Key Establishment and Management (P1)</em> <br></p>
																									   <p>[6] Standards Mapping - OWASP Mobile Top 10 Risks 2014 <em>M6 Broken Cryptography</em> <br></p>
																									   <p>[7] Standards Mapping - OWASP Top 10 2004 <em>A8 Insecure Storage</em> <br></p>
																									   <p>[8] Standards Mapping - OWASP Top 10 2007 <em>A8 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[9] Standards Mapping - OWASP Top 10 2010 <em>A7 Insecure Cryptographic Storage</em> <br></p>
																									   <p>[10] Standards Mapping - OWASP Top 10 2013 <em>A6 Sensitive Data Exposure</em> <br></p>
																									   <p>[11] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 <em>Requirement 3.4, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[12] Standards Mapping - Payment Card Industry Data Security Standard Version 1.2 <em>Requirement 3.4, Requirement 6.3.1.3, Requirement 6.5.8, Requirement 8.4</em> <br></p>
																									   <p>[13] Standards Mapping - Payment Card Industry Data Security Standard Version 2.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.4</em> <br></p>
																									   <p>[14] Standards Mapping - Payment Card Industry Data Security Standard Version 3.0 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[15] Standards Mapping - Payment Card Industry Data Security Standard Version 3.1 <em>Requirement 3.4, Requirement 6.5.3, Requirement 8.2.1</em> <br></p>
																									   <p>[16] Standards Mapping - SANS Top 25 2009 <em>Porous Defenses - CWE ID 259</em> <br></p>
																									   <p>[17] Standards Mapping - Security Technical Implementation Guide Version 3.1 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[18] Standards Mapping - Security Technical Implementation Guide Version 3.4 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[19] Standards Mapping - Security Technical Implementation Guide Version 3.5 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[20] Standards Mapping - Security Technical Implementation Guide Version 3.6 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[21] Standards Mapping - Security Technical Implementation Guide Version 3.7 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[22] Standards Mapping - Security Technical Implementation Guide Version 3.9 <em>APP3210.1 CAT II, APP3350 CAT I</em> <br></p>
																									   <p>[23] Standards Mapping - Web Application Security Consortium Version 2.00 <em>Information Leakage (WASC-13)</em> <br></p>
																														<div id="theFooter">
							<p></p>
							<br><center>
                                                        Â© Copyright 2008 - 2015 Hewlett Packard Enterprise Development Company, L.P.
							<br>
							(Generated from version 2015.4.0.0008 of the HPE Security Fortify Secure Coding Rulepacks)
							<br>
							desc.semantic.java.key_management_empty_hmac_key
							</center>
							<p></p>
						</div>
</div>
</div></body>
</html>
 
